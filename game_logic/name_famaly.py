# –í–Ω–µ—à–Ω–∏–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
from aiogram import types
from aiogram.dispatcher.filters import Text

# –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ —Ñ–∞–π–ª—ã
from main import dp
from database.db_manager import DatabaseManager
from game_logic.logic import step1_logic

async def name_famaly_regist(tg_id):
    # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π
    name_completed = False
    surname_completed = False
    name = None
    surname = None

    @dp.message_handler(Text('ü§Ø–ù–ê–ß–ê–¢–¨ –ò–ì–†–£'))
    async def start_game_cmd(message: types.Message):
        global name_completed, surname_completed, name, surname

        if message.chat.type == "private":
            await message.answer('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è')
            name_completed = False
            surname_completed = False
            name = None
            surname = None

    @dp.message_handler(content_types=types.ContentType.TEXT)
    async def handle_text_answer(message: types.Message):
        global name_completed, surname_completed, name, surname

        if not name_completed:
            name = message.text
            name_completed = True
            await message.answer('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Ñ–∞–º–∏–ª–∏—é')
        elif not surname_completed:
            surname = message.text
            surname_completed = True

            # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö 
            db_manager = DatabaseManager()

            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –∏ —Ñ–∞–º–∏–ª–∏–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            await db_manager.add_name_family_user(tg_id, name, surname)

            # –í—ã–≤–æ–¥–∏–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é
            await message.answer(f"–ò–º—è: {name}, –§–∞–º–∏–ª–∏—è: {surname}")

            await db_manager.update_current_step(tg_id, 1)
            await step1_logic(message, tg_id)


